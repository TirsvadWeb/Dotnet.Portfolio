@page "/"
@attribute [StreamRendering]
@using Microsoft.EntityFrameworkCore
@using Portfolio.Core.Repository.IRepository
@inject Portfolio.Data.ApplicationDbContext Db
@inject IPortfolioItemRepository portfolioItemRepository
@inject IGenreRepository genreRepository

<style>
    .card-container {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .flip-card {
        background-color: transparent;
        width: 220px;
        height: 120px;
        perspective: 1000px;
    }

    .flip-card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.6s;
        transform-style: preserve-3d;
    }

    .flip-card:hover .flip-card-inner {
        transform: rotateY(180deg);
    }

    .flip-card-front, .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        background: #fff;
    }

    .flip-card-back {
        transform: rotateY(180deg);
        background: #f0f0f0;
    }
</style>

<PageTitle>Home</PageTitle>

<div class="row">
    @if (developer == null)
    {
        <div>
            <img src="/images/loading.svg" alt="loading..." />
        </div>
    }
    else
    {
        <div style="background-image: url('images/socialMediaBanner.png'); background-size: cover; background-position: center; border-radius: 8px; min-height: 180px; margin-bottom: 1.5rem;">
            <div>
                @if (!string.IsNullOrWhiteSpace(developer.ProfileImageUrl))
                {
                    <img src="@developer.ProfileImageUrl" alt="Profile" style="width:80px; height:80px; border-radius:50%; border:3px solid #fff; box-shadow:0 2px 8px #0002;" />
                }
                <div style="background: rgba(255,255,255,0.8); margin: 1rem; padding: 1rem; max-height: 180px; width: fit-content; border-radius: 8px; overflow:auto">
                    <h2 style="margin: 0;">@developer.Name</h2>
                    <p style="margin: 0;">@developer.Description</p>
                </div>
            </div>
        </div>
    }
</div>
<div class="row">
    <div class="col-md-12">
        <p>Here is a sample of project I have done as developer.</p>
        @if (portfolioItems == null)
        {
            <div>
                <img src="/images/loading.svg" alt="loading..." />
            </div>
        }
        else
        {
            <div class="card-container">
                @foreach (var item in portfolioItems)
                {
                    <div class="flip-card">
                        <div class="flip-card-inner">
                            <div class="flip-card-front">
                                <strong>@item.Name</strong>
                            </div>
                            <div class="flip-card-back">
                                @($"{item.Name} - {string.Join(", ", item.GenreTagAsName)}")
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>


@code {
    private Portfolio.Core.Models.DeveloperInfo? developer;
    private IEnumerable<ViewModels.PortfolioItem>? portfolioItems;

    protected override async Task OnInitializedAsync()
    {
        developer = await Db.DeveloperInfo.FirstOrDefaultAsync() ?? new();

        var portfolioItemsCore = await portfolioItemRepository.GetAllAsync();
        portfolioItems = (await Task.WhenAll(portfolioItemsCore
            .Select(async p => new ViewModels.PortfolioItem
            {
                Name = p.Name,
                Description = p.Description,
                SourceLink = p.SourceLink,
                GenreTagAsName = await GetGenreNames(p.GenreTags)
            })))
            .OrderBy(p => p.Name);
    }

    protected async Task<IEnumerable<string>> GetGenreNames(IEnumerable<Guid> guids)
    {
        var genres = await genreRepository.GetAllAsync();
        return guids.Select(guid => genres.FirstOrDefault(g => g.Guid == guid)?.Name ?? string.Empty);
    }
}