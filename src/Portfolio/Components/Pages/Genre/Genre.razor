@page "/genre/edit"
@rendermode InteractiveServer
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Portfolio.Core.Repository.IRepository
@using Portfolio.Repository
@inject IGenreRepository _genreRepository

<h3>Genre</h3>

<div class="row">
    <div class="col-md-5">
        @if (genres == null)
        {
            <div>
                <img src="/images/loading.svg" alt="loading..." />
            </div>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var genre in genres)
                    {
                        <tr>
                            <td>@genre.Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-md-7">
        <EditForm Model="newGenre" OnValidSubmit="AddGenre">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3" style="max-width: 400px; width: 100%;">
                <label for="genreName" class="form-label">New Genre Name</label>
                <InputText id="genreName" class="form-control" @bind-Value="newGenre.Name" maxlength="@nameMaxLength" />
                <ValidationMessage For="@(() => newGenre.Name)" />
            </div>
            <button type="submit" class="btn btn-primary">Add Genre</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<Core.Models.Genre> genres = [];
    private Core.Models.Genre newGenre = new();
    private int nameMaxLength;

    protected override async Task OnInitializedAsync()
    {
        // Get maxlength from StringLength attribute on Genre.Name
        var nameProp = typeof(Core.Models.Genre).GetProperty(nameof(Core.Models.Genre.Name));
        var attr = nameProp?.GetCustomAttributes(typeof(StringLengthAttribute), false)
                            .FirstOrDefault() as StringLengthAttribute;
        if (attr != null)
        {
            nameMaxLength = attr.MaximumLength;
        }

        genres = (await _genreRepository.GetAllAsync()).OrderBy(g => g.Name);
    }

    private async Task AddGenre()
    {
        if (!string.IsNullOrWhiteSpace(newGenre.Name))
        {
            var genre = new Core.Models.Genre
            {
                Id = Guid.NewGuid(),
                Name = newGenre.Name
            };
            var newObj = await _genreRepository.AddAsync(genre);
            genres = (await _genreRepository.GetAllAsync()).OrderBy(g => g.Name);

            newGenre = new Core.Models.Genre();
        }
    }

    // public class GenreInputModel
    // {
    //     [Required]
    //     [StringLength(20, ErrorMessage = "Name must be 20 characters or less.")]
    //     public string Name { get; set; } = string.Empty;
    // }
}