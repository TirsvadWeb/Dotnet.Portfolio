@page "/genre/edit"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Portfolio.Core.Models
@using Portfolio.Repository
@inject IGenreRepository _genreRepository

<h3>Genre</h3>

<div class="row">
    <div class="col-md-7">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Guid</th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var genre in genres)
                {
                    <tr>
                        <td>@genre.Guid</td>
                        <td>@genre.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-5">
        <EditForm Model="newGenre" OnValidSubmit="AddGenre">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3" style="max-width: 400px; width: 100%;">
                <label for="genreName" class="form-label">New Genre Name</label>
                <InputText id="genreName" class="form-control" @bind-Value="newGenre.Name" maxlength="20" />
                <ValidationMessage For="@(() => newGenre.Name)" />
            </div>
            <button type="submit" class="btn btn-primary">Add Genre</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<Core.Models.Genre> genres = [];
    private GenreInputModel newGenre = new();

    protected override async Task OnInitializedAsync()
    {
        genres = (await _genreRepository.GetAllAsync()).OrderBy(g => g.Name);
    }

    private async Task AddGenre()
    {
        if (!string.IsNullOrWhiteSpace(newGenre.Name))
        {
            var genre = new Core.Models.Genre
            {
                Guid = Guid.NewGuid(),
                Name = newGenre.Name
            };
            var newObj = await _genreRepository.AddAsync(genre);
            genres = (await _genreRepository.GetAllAsync()).OrderBy(g => g.Name);

            newGenre = new GenreInputModel();
        }
    }

    public class GenreInputModel
    {
        [Required]
        [StringLength(20, ErrorMessage = "Name must be 20 characters or less.")]
        public string Name { get; set; } = string.Empty;
    }
}