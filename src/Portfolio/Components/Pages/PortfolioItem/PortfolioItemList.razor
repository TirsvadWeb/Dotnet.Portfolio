@page "/portfolioItem/list"  
@attribute [StreamRendering]  
@using Portfolio.Core.Models  
@using Portfolio.Core.Repository.IRepository
@inject IPortfolioItemRepository _portfolioItemRepository  
@inject IGenreRepository _genreRepository  

@if (_portfolioItems == null)
{
    <div>
        <img src="/images/loading.svg" alt="loading..." />
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Descriptions</th>
                <th>Source</th>
                <th>Tags</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _portfolioItems)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td><a href="@item.SourceLink">@item.SourceLink</a></td>
                    <td>@string.Join(", ", item.GenreTagAsName)</td>
                </tr>
            }
        </tbody>
    </table>
}  

@code {
    private IEnumerable<Portfolio.Core.Models.ViewModels.PortfolioItemViewModel>? _portfolioItems;  

    protected override async Task OnInitializedAsync()
    {
        var portfolioItems = await _portfolioItemRepository.GetAllAsync();
        _portfolioItems = (await Task.WhenAll(portfolioItems
            .Select(async p => new Portfolio.Core.Models.ViewModels.PortfolioItemViewModel
            {
                Name = p.Name,
                Description = p.Description,
                SourceLink = p.SourceLink,
                GenreTagAsName = await GetGenreName(p.GenreTags)
            })))
            .OrderBy(p => p.Name);
    }

    protected async Task<IEnumerable<string>> GetGenreName(IEnumerable<Guid> guids)
    {
        var genres = await _genreRepository.GetAllAsync();
        return guids.Select(guid => genres.FirstOrDefault(g => g.Id == guid)?.Name ?? string.Empty);
    }
}
